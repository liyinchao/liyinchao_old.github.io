<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通过hexo和github创建一个属于自己的博客</title>
      <link href="/2019/10/10/%E9%80%9A%E8%BF%87hexo%E5%92%8Cgithub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/10/10/%E9%80%9A%E8%BF%87hexo%E5%92%8Cgithub%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>在网上搜索到了很多关于如何通过github+Hexo创建博客的文章,通过参考大家的博客,最后自己的博客也创建成功了,此篇文章是为了记录这个创建的过程.</p><p>主要参考的文章地址如下:</p><p><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></p><p><a href="https://iseex.github.io/2018-08/custom-domain/" target="_blank" rel="noopener">GitHub Pages域名绑定及https支持的配置步骤</a></p><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github图床" target="_blank" rel="noopener">github图床</a></p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤:"></a>搭建步骤:</h2><a id="more"></a><h3 id="获得个人网站域名"><a href="#获得个人网站域名" class="headerlink" title="获得个人网站域名"></a>获得个人网站域名</h3><p>通过<a href="https://www.namecheap.com/网站申请域名,价格1年10美元左右" target="_blank" rel="noopener">https://www.namecheap.com/网站申请域名,价格1年10美元左右</a>.</p><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href="https://github.com/" target="_blank" rel="noopener">github官网地址</a></p><p>点击GitHub中的New repository创建新仓库，仓库名应该为：<code>用户名</code>.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个<code>用户名</code>使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570610666769.png" alt="1570610666769"></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰</a>老师的Git教程：Git从Git官网下载：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git - Downloading Package</a> 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_hd.jpg" alt></p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_hd.jpg" alt="v2-8b1cbe253d6e0301bd9a68c6f98a9f52_hd"></p><p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成ssh密钥文件(生成的密钥存储的地址控制台上会有打印)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码 然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570611847217.png" alt="1570611847217"></p><p>打开<a href="https://github.com/settings/keys" target="_blank" rel="noopener">GitHub_Settings_keys</a> 页面，新建new SSH Key</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/v2-72a3f22c080e99343c3cc4aabce10e3c_hd.jpg" alt="img"></p><p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。 在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code> ：</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/v2-da481ffa686410becd4186c656b4ebd6_hd.jpg" alt="img"></p><p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><blockquote><p>如果验证的时候连接异常,如下图所示.</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570596953102.png" alt="1570596953102"></p><p>ping <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:ping不同,说明没能正常解析网址.</p><p><strong>解决方案：</strong> 在C:\Windows\System32\drivers\etc\hosts文件末尾添加如下内容，并保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 192.30.255.112  github.com git 185.31.16.184 github.global.ssl.fastly.net  </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js，Node.js下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570611623275.png" alt="1570611623275"></p><p>检测npm是否安装成功，在命令行中输入npm -v :</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570611640515.png" alt="1570611640515"></p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo:"></a>安装hexo:</h3><ol><li><p>执行: npm install -g hexo</p><p>这里常常安装了一半就卡住装不下去了,Ctrl+C,在重新执行命令很快就能执行完毕.</p></li><li><p>创建hexo文件夹:</p><p>自己找一个喜欢的路径,创建hexo文件夹,我的是安装在 E:\BigData 下的.</p><p>cmd窗口切换到对应的目录下,然后执行: <code>hexo init</code></p><p>也可以在 E:\hexo 下右键,选择git bash,在窗口中执行 hexo init</p><p>它就自动安装了需要的文件.</p></li><li><p>安装依赖:</p><p>继续执行: <code>npm install</code></p><p>安装好了所有的依赖</p></li></ol><ol start="4"><li><p>完成本地安装:</p><p>继续在 E:\hexo 下执行: <code>hexo generate</code></p><p>继续执行: <code>hexo server</code></p><p>然后在打开浏览器 localhost:4000 ,就可以看到,本地已经安装好了.</p><p>如下图所示:</p></li></ol><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570611957624.png" alt="1570611957624"></p><h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612191126.png" alt="1570612191126"></p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612212437.png" alt="1570612212437"></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><p>deploy: type: git repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git branch: master参考如下：</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612260776.png" alt="1570612260776"></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这时，我们分别输入三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean hexo g hexo d</span><br></pre></td></tr></table></figure><p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <code>http://xxxx.github.io</code></p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612408170.png" alt="1570612408170"></p><p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>DNS用于域名解析，即将主机空间和域名建立定向关系，是搭建网站非常重要的一个环节。一般来说，主机空间价格较贵，域名比较便宜（除非是那些非常好的域名）。之所以GitHub Pages这么受欢迎，原因之一便是GitHub Pages提供免费的主机空间。</p><p>DNSPod是主流的域名解析平台，不过这里用的是namecheap自带的域名解析服务。登陆namecheap，进入控制台，点击Domain List，可以查看到自己的域名，再点击 Manage，如下图。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612958804.png" alt="1570612958804"></p><p>进入下图，点击Advanced DNS，可以看到namecheap控制台已经自动为你添加了记录。其中两条A记录指向的ip地址是GitHub Pages提供的ip，www指定的记录是你在GitHub注册的仓库。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612832100.png" alt="1570612832100"></p><p>需要注意的是，为了https配置，上图中的ip是需要修改的.</p><p>因此根据GitHub提供的<a href="https://help.github.com/articles/troubleshooting-custom-domains/#https-errors" target="_blank" rel="noopener">帮助文档</a>中的信息：</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570612749139.png" alt="1570612749139"></p><p>可以知道，支持https的ip地址必须指向以下ip其中一个。</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>如上图所示，我在namecheap控制台配置的就是其中两个。到此DNS的设置就完成了</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570613356263.png" alt="1570613356263"></p><p>到这里看似该完成的都完成了，可是打开settings，发现还是有警告⚠️。接着，我根据GitHub Pages的<a href="https://help.github.com/articles/securing-your-github-pages-site-with-https/" target="_blank" rel="noopener">Help页面</a>提供的帮助，如下图。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570613743406.png" alt="1570613743406"></p><p>大致意思是让html中的链接（src）都使用https的形式，因此我想到的解决办法是在Hexo的配置文件_config.yml的url项写上带https的域名，如下所示。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570613808429.png" alt="1570613808429"></p><p>修改完push一下，再次到仓库的settings一看发现一切正常，如下图所示。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570613858008.png" alt="1570613858008"></p><p>在Chrome中打开网站<a href><code>liyinchao.com</code></a>，也显示安全，如下图。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570613962707.png" alt="1570613962707"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a> 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 这个是next原来的地址git clone https://github.com/iissnan/hexo-theme-next themes/next# 这个是next最新的地址,我下载的是这个.git clone https://github.com/theme-next/hexo-theme-next themes/newnext</span><br></pre></td></tr></table></figure><p>这是将Next主题下载到blog目录的themes主题下的newnext文件夹中。打开<strong>站点</strong>的_config.yml配置文件，修改主题为newnext</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570618113708.png" alt="1570618113708"></p><p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570617690139.png" alt="1570617690139"></p><p>next主题有四个样式，我用的是Muse，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><p>注意:主题更换完毕,需要在github的repository上重新设置域名,否则会用户自定义的域名是空的.</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570619271273.png" alt="1570619271273"></p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570619257541.png" alt="1570619257541"></p><h3 id="初识Markdown语法"><a href="#初识Markdown语法" class="headerlink" title="初识Markdown语法"></a>初识Markdown语法</h3><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，我使用的是本地MarkDown<a href="https://www.typora.io/" target="_blank" rel="noopener"><code>typora</code></a>.网上有很多教程,这里先放一个连接<a href="https://www.jianshu.com/p/a6a6a22e9393" target="_blank" rel="noopener">Typora极简教程</a>.</p><h3 id="GitHub图床"><a href="#GitHub图床" class="headerlink" title="GitHub图床"></a>GitHub图床</h3><p>github虽然说慢,但是免费,稳定并且如果使用七牛云等需要域名备案,比较麻烦.</p><p>配置手册:参考<a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html" target="_blank" rel="noopener">PicGo</a></p><p>PicGo的配置文件在不同系统里是不一样的。</p><ul><li>Windows: <code>%APPDATA%\picgo\data.json</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;  &quot;repo&quot;: &quot;&quot;, // 仓库名，格式是username/reponame  &quot;token&quot;: &quot;&quot;, // github token  &quot;path&quot;: &quot;&quot;, // 自定义存储路径，比如img/  &quot;customUrl&quot;: &quot;&quot;, // 自定义域名，注意要加http://或者https://  &quot;branch&quot;: &quot;&quot; // 分支名，默认是master&#125;</span><br></pre></td></tr></table></figure><p><strong>1.</strong> 首先你得有一个GitHub账号。注册GitHub就不用我多言。</p><p><strong>2.</strong> 新建一个仓库</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/create_new_repo.png" alt="img"></p><p>记下你取的仓库名。</p><p><strong>3.</strong> 生成一个token用于PicGo操作你的仓库：</p><p>访问：<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">https://github.com/settings/tokens</a></p><p>然后点击<code>Generate new token</code>。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/generate_new_token.png" alt="img"></p><p>把repo的勾打上即可。然后翻到页面最底部，点击<code>Generate token</code>的绿色按钮生成token。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/20180508210435.png" alt="img"></p><p><strong>注意：</strong>这个token生成后只会显示一次！你要把这个token复制一下存到其他地方以备以后要用。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/copy_token.png" alt="img"></p><p><strong>4.</strong> 配置PicGo</p><p><strong>注意：</strong>仓库名的格式是<code>用户名/仓库</code>，比如我创建了一个叫做<code>pic</code>的仓库，在PicGo里我要设定的仓库名就是<code>liyinchao/pic</code>。一般我们选择<code>master</code>分支即可。然后记得点击确定以生效，然后可以点击<code>设为默认图床</code>来确保上传的图床是GitHub。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570638717679.png" alt="1570638717679"></p><p>至此配置完毕，已经可以使用了。当你上传的时候，你会发现你的仓库里也会增加新的图片了：</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570639224249.png" alt="1570639224249"></p><p>软件设置等相关操作请参考这篇文章<a href>picgo</a></p><p>然后就可以将上传到github上图片的制作成markdown上的连接形式,如下格式,可以直接使用:</p><p><code>![1570639224249](https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570639224249.png)</code></p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>我们开始正式发布上线博客文章，在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名字&quot;</span><br></pre></td></tr></table></figure><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客名字.md</strong> 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求.</p><p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570643943551.png" alt></p><p><strong>个性化设置</strong></p><p>所谓的个性化设置就是根据个人需要添加不同的插件及功能。</p><p>基本的有：</p><p>在站点配置文件_config.yml修改基本的站点信息</p><p><img src="https://raw.githubusercontent.com/liyinchao/pic/master/upload/2019/10/10/1570643978154.png" alt></p><p>依次是网站标题、副标题、网站描述、关键字、作者、网站语言、时区。</p><h3 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h3><h4 id="统计文字"><a href="#统计文字" class="headerlink" title="统计文字"></a>统计文字</h4><p>统计文章字数的方法,选择的是<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">hexo-symbols-count-time</a>,推荐一个如何使用该插件的的文章:<a href="https://co5.me/2018/180613-wordcount.html" target="_blank" rel="noopener">Hexo NexT v6.3.0 字数统计</a></p><h4 id="统计访问人数"><a href="#统计访问人数" class="headerlink" title="统计访问人数"></a>统计访问人数</h4><blockquote><p>如果你是hexo的next主题,只需要修改”themes\next_config.yml”如下的内容,false改成true.</p><p><code>enable: false</code> -&gt;<code>enable: true</code></p><p>busuanzi_count:<br>  enable: true<br>  total_visitors: true<br>  total_visitors_icon: user<br>  total_views: true<br>  total_views_icon: eye<br>  post_views: true<br>  post_views_icon: eye</p></blockquote><h4 id="添加分类和标签"><a href="#添加分类和标签" class="headerlink" title="添加分类和标签"></a>添加分类和标签</h4><p>可以参考这篇文章.<a href="[https://linlif.github.io/2017/05/27/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/](https://linlif.github.io/2017/05/27/Hexo使用攻略-添加分类及标签/)">Hexo使用攻略-添加分类及标签</a></p><h4 id="about页面怎么设置"><a href="#about页面怎么设置" class="headerlink" title="about页面怎么设置"></a>about页面怎么设置</h4><p>可以参考这篇文章,<a href="http://www.5isjyx.com/coding/201704/hexonextabout.html" target="_blank" rel="noopener">Hexo about页面怎么写 Next关于页面怎么设置</a></p><h4 id="回到顶部按钮显示百分比"><a href="#回到顶部按钮显示百分比" class="headerlink" title="回到顶部按钮显示百分比"></a>回到顶部按钮显示百分比</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  # 回到顶部按钮</span><br><span class="line">  enable: true</span><br><span class="line">  # true，按钮显示在侧边栏；false，按钮显示在右下角</span><br><span class="line">  sidebar: false</span><br><span class="line">  # 按钮上显示百分比</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure><h4 id="增加RSS功能"><a href="#增加RSS功能" class="headerlink" title="增加RSS功能"></a>增加RSS功能</h4><p>可以参考这篇文章,<a href="http://joveyzheng.com/2016/03/03/hexo-theme-next-brief-talk/" target="_blank" rel="noopener">Hexo 构建博客 - NexT 主题浅谈</a></p><h4 id="首页不显示全文"><a href="#首页不显示全文" class="headerlink" title="首页不显示全文"></a>首页不显示全文</h4><p>可以参考这篇文章,<a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">Hexo之next主题设置首页不显示全文(只显示预览)</a></p><h4 id="添加gittalk评论系统"><a href="#添加gittalk评论系统" class="headerlink" title="添加gittalk评论系统"></a>添加gittalk评论系统</h4><p>可以参考这篇文章,<a href="[http://forestneo.com/2019/01/05/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE-Hexo-Next%E4%B8%BB%E9%A2%98%E5%8A%A0%E5%85%A5%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/](http://forestneo.com/2019/01/05/系统配置-Hexo-Next主题加入评论系统/)">系统配置-Hexo NexT加入评论系统</a></p><p>按照上面文章配置后,总是报gitalk redirect_uri_mismatch,一直重定向回来,参考这个帖子解决了,<a href="https://github.com/gitalk/gitalk/issues/162" target="_blank" rel="noopener">将OAuth Application 项目的callback url的www去掉成功了</a></p><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><p>还有好玩的功能可以体验,以后有时间继续搞一搞.</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
            <tag> 图床 </tag>
            
            <tag> gittalk </tag>
            
            <tag> RSS </tag>
            
            <tag> 主题优化 </tag>
            
            <tag> namecheap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
